def lowerThan (x: Int, y: Int): Int = x < y;

def length (l: List[Int]): Int =
  if (isEmpty (l)) 0 else 1 + length (tail (l));

def take (l: List[Int], n: Int): List[Int] =
  if (n == 0) [] else head (l) :: take (tail (l), n - 1);

def drop (l: List[Int], n: Int): List[Int] =
  if (n == 0) l else drop (tail (l), n - 1);

def merge (l1: List[Int], l2: List[Int], lowerThan: (Int, Int) Int): List[Int]=
  if (isEmpty (l1))
    l2
  else if (isEmpty (l2))
    l1
  else {
    var h1: Int = head (l1);
    var h2: Int = head (l2);
    if (lowerThan (h1, h2))
      h1 :: merge (tail (l1), l2, lowerThan)
    else
      h2 :: merge (l1, tail (l2), lowerThan)
  };

def mergeSort (l: List[Int], lowerThan: (Int, Int) Int): List[Int]  = {
  var len: Int = length (l);
  if (len < 2)
    l
  else {
    var halfSize: Int = len / 2;
    var sortedFirstHalf: List[Int] = mergeSort (take (l, halfSize), lowerThan);
    var sortedSecondHalf: List[Int] = mergeSort (drop (l, halfSize), lowerThan);
    merge (sortedFirstHalf, sortedSecondHalf, lowerThan)
  }
};

def newLine (): Unit = printChar (10);

def printList (l: List[Int]): Int =
  if (! isEmpty (l)) {
    printInt (head (l));
    newLine ();
    printList (tail (l))
  } else 0;

printList (mergeSort ([3,6,2,77,32,5,1,4], lowerThan))
